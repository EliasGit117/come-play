/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as AdminNewsRouteRouteImport } from './routes/admin/news/route'
import { Route as AdminNewsIndexRouteImport } from './routes/admin/news/index'
import { Route as PublicNewsIndexRouteImport } from './routes/_public/news/index'
import { Route as PublicCalculatorIndexRouteImport } from './routes/_public/calculator/index'
import { Route as PublicNewsSlugRouteImport } from './routes/_public/news/$slug'
import { Route as AdminNewsIdEditRouteImport } from './routes/admin/news/$id/edit'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AdminNewsRouteRoute = AdminNewsRouteRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminNewsIndexRoute = AdminNewsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminNewsRouteRoute,
} as any)
const PublicNewsIndexRoute = PublicNewsIndexRouteImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCalculatorIndexRoute = PublicCalculatorIndexRouteImport.update({
  id: '/calculator/',
  path: '/calculator/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicNewsSlugRoute = PublicNewsSlugRouteImport.update({
  id: '/news/$slug',
  path: '/news/$slug',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AdminNewsIdEditRoute = AdminNewsIdEditRouteImport.update({
  id: '/$id/edit',
  path: '/$id/edit',
  getParentRoute: () => AdminNewsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/news': typeof AdminNewsRouteRouteWithChildren
  '/': typeof PublicIndexRoute
  '/news/$slug': typeof PublicNewsSlugRoute
  '/calculator': typeof PublicCalculatorIndexRoute
  '/news': typeof PublicNewsIndexRoute
  '/admin/news/': typeof AdminNewsIndexRoute
  '/admin/news/$id/edit': typeof AdminNewsIdEditRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRouteRouteWithChildren
  '/': typeof PublicIndexRoute
  '/news/$slug': typeof PublicNewsSlugRoute
  '/calculator': typeof PublicCalculatorIndexRoute
  '/news': typeof PublicNewsIndexRoute
  '/admin/news': typeof AdminNewsIndexRoute
  '/admin/news/$id/edit': typeof AdminNewsIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/news': typeof AdminNewsRouteRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_public/news/$slug': typeof PublicNewsSlugRoute
  '/_public/calculator/': typeof PublicCalculatorIndexRoute
  '/_public/news/': typeof PublicNewsIndexRoute
  '/admin/news/': typeof AdminNewsIndexRoute
  '/admin/news/$id/edit': typeof AdminNewsIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/admin/news'
    | '/'
    | '/news/$slug'
    | '/calculator'
    | '/news'
    | '/admin/news/'
    | '/admin/news/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/'
    | '/news/$slug'
    | '/calculator'
    | '/news'
    | '/admin/news'
    | '/admin/news/$id/edit'
  id:
    | '__root__'
    | '/_public'
    | '/admin'
    | '/admin/news'
    | '/_public/'
    | '/_public/news/$slug'
    | '/_public/calculator/'
    | '/_public/news/'
    | '/admin/news/'
    | '/admin/news/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/news': {
      id: '/admin/news'
      path: '/news'
      fullPath: '/admin/news'
      preLoaderRoute: typeof AdminNewsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/news/': {
      id: '/admin/news/'
      path: '/'
      fullPath: '/admin/news/'
      preLoaderRoute: typeof AdminNewsIndexRouteImport
      parentRoute: typeof AdminNewsRouteRoute
    }
    '/_public/news/': {
      id: '/_public/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof PublicNewsIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/calculator/': {
      id: '/_public/calculator/'
      path: '/calculator'
      fullPath: '/calculator'
      preLoaderRoute: typeof PublicCalculatorIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/news/$slug': {
      id: '/_public/news/$slug'
      path: '/news/$slug'
      fullPath: '/news/$slug'
      preLoaderRoute: typeof PublicNewsSlugRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/news/$id/edit': {
      id: '/admin/news/$id/edit'
      path: '/$id/edit'
      fullPath: '/admin/news/$id/edit'
      preLoaderRoute: typeof AdminNewsIdEditRouteImport
      parentRoute: typeof AdminNewsRouteRoute
    }
  }
}

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicNewsSlugRoute: typeof PublicNewsSlugRoute
  PublicCalculatorIndexRoute: typeof PublicCalculatorIndexRoute
  PublicNewsIndexRoute: typeof PublicNewsIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicNewsSlugRoute: PublicNewsSlugRoute,
  PublicCalculatorIndexRoute: PublicCalculatorIndexRoute,
  PublicNewsIndexRoute: PublicNewsIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface AdminNewsRouteRouteChildren {
  AdminNewsIndexRoute: typeof AdminNewsIndexRoute
  AdminNewsIdEditRoute: typeof AdminNewsIdEditRoute
}

const AdminNewsRouteRouteChildren: AdminNewsRouteRouteChildren = {
  AdminNewsIndexRoute: AdminNewsIndexRoute,
  AdminNewsIdEditRoute: AdminNewsIdEditRoute,
}

const AdminNewsRouteRouteWithChildren = AdminNewsRouteRoute._addFileChildren(
  AdminNewsRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminNewsRouteRoute: typeof AdminNewsRouteRouteWithChildren
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminNewsRouteRoute: AdminNewsRouteRouteWithChildren,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PublicRouteRoute: PublicRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
