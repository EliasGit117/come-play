/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as DeferredIndexRouteImport } from './routes/deferred/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as PostsPostIdIndexRouteImport } from './routes/posts/$postId/index'
import { ServerRoute as ApiUsersIndexServerRouteImport } from './routes/api/users/index'
import { ServerRoute as ApiUsersIdServerRouteImport } from './routes/api/users/$id'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredIndexRoute = DeferredIndexRouteImport.update({
  id: '/deferred/',
  path: '/deferred/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdIndexRoute = PostsPostIdIndexRouteImport.update({
  id: '/posts/$postId/',
  path: '/posts/$postId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersIndexServerRoute = ApiUsersIndexServerRouteImport.update({
  id: '/api/users/',
  path: '/api/users/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersIdServerRoute = ApiUsersIdServerRouteImport.update({
  id: '/api/users/$id',
  path: '/api/users/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/deferred': typeof DeferredIndexRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/deferred': typeof DeferredIndexRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/deferred/': typeof DeferredIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/users/$userId'
    | '/deferred'
    | '/posts'
    | '/users'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/users/$userId'
    | '/deferred'
    | '/posts'
    | '/users'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/users/$userId'
    | '/deferred/'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  DeferredIndexRoute: typeof DeferredIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/users/$id': typeof ApiUsersIdServerRoute
  '/api/users': typeof ApiUsersIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users/$id': typeof ApiUsersIdServerRoute
  '/api/users': typeof ApiUsersIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users/$id': typeof ApiUsersIdServerRoute
  '/api/users/': typeof ApiUsersIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users/$id' | '/api/users'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users/$id' | '/api/users'
  id: '__root__' | '/api/users/$id' | '/api/users/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersIdServerRoute: typeof ApiUsersIdServerRoute
  ApiUsersIndexServerRoute: typeof ApiUsersIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred/': {
      id: '/deferred/'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users/': {
      id: '/api/users/'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/api/users/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  DeferredIndexRoute: DeferredIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersIdServerRoute: ApiUsersIdServerRoute,
  ApiUsersIndexServerRoute: ApiUsersIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
